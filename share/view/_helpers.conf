@do require('Gnome2');

@define HBox($calls, $spacing = 0, $bwidth = 0) widget('Gtk2::HBox', {
    construct [false, $spacing];
    call $calls;
    set border_width $bwidth;
});

@define VBox($calls, $spacing = 0, $bwidth = 0) widget('Gtk2::VBox', {
    construct [false, $spacing];
    call $calls;
    set border_width $bwidth;
});

@define SBox($model, $widget, $prop = 'sensitive')
    widget('App::GPAudio::Widget::SensitiveBox', {
        construct {
            model $model;
            sensitive_property $prop;
        };
        child $widget;
    });

@define HSeparator() widget('Gtk2::HSeparator');
@define VSeparator() widget('Gtk2::VSeparator');

@define Scrolled($widget) widget('Gtk2::ScrolledWindow', {
    set shadow_type 'in';
    child $widget;
});

$theme = widget('Gtk2::IconTheme');

@define enable_button_images($widget) do(
    $settings = call($widget, 'get_settings');
    call($settings, 'set', 'gtk-button-images', true);
    $widget;
);

@define pack_start($widget, $expand = false, $fill = true, $pad = 0)
    ['pack_start', $widget, $expand, $fill, $pad];

@define pack_end($widget, $expand = false, $fill = true, $pad = 0)
    ['pack_end', $widget, $expand, $fill, $pad];

@define TreeColumn($args) widget('Gtk2::TreeViewColumn', {
    $cell = widget('Gtk2::CellRendererText', {
        set ellipsize 'end';
        set alignment get($args, 'align');
        set xpad 5;
    });
    set title get($args, 'title');
    set resizable true;
    set expand get($args, 'expand');
    set sort_column_id get($args, 'sort_column');
    set alignment 0.5;
    set sizing get($args, 'sizing');
    call [
        ['pack_start', $cell, true];
        ['add_attribute', $cell, 'text', get($args, 'column')];
    ];
});
